// Copyright (c) 2018 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=4518c58051d90673ecc1fc2b9e29b70467b36c97$
//

#include "libcef_dll/ctocpp/v8array_buffer_release_callback_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

void CefV8ArrayBufferReleaseCallbackCToCpp::ReleaseBuffer(void* buffer) {
  cef_v8array_buffer_release_callback_t* _struct = GetStruct();
  if (CEF_MEMBER_MISSING(_struct, release_buffer))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: buffer; type: simple_byaddr
  DCHECK(buffer);
  if (!buffer)
    return;

  // Execute
  _struct->release_buffer(_struct, buffer);
}

// CONSTRUCTOR - Do not edit by hand.

CefV8ArrayBufferReleaseCallbackCToCpp::CefV8ArrayBufferReleaseCallbackCToCpp() {
}

template <>
cef_v8array_buffer_release_callback_t*
CefCToCppRefCounted<CefV8ArrayBufferReleaseCallbackCToCpp,
                    CefV8ArrayBufferReleaseCallback,
                    cef_v8array_buffer_release_callback_t>::
    UnwrapDerived(CefWrapperType type, CefV8ArrayBufferReleaseCallback* c) {
  NOTREACHED() << "Unexpected class type: " << type;
  return NULL;
}

#if DCHECK_IS_ON()
template <>
base::AtomicRefCount CefCToCppRefCounted<
    CefV8ArrayBufferReleaseCallbackCToCpp,
    CefV8ArrayBufferReleaseCallback,
    cef_v8array_buffer_release_callback_t>::DebugObjCt ATOMIC_DECLARATION;
#endif

template <>
CefWrapperType
    CefCToCppRefCounted<CefV8ArrayBufferReleaseCallbackCToCpp,
                        CefV8ArrayBufferReleaseCallback,
                        cef_v8array_buffer_release_callback_t>::kWrapperType =
        WT_V8ARRAY_BUFFER_RELEASE_CALLBACK;
