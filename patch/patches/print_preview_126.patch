diff --git chrome/browser/ui/webui/constrained_web_dialog_ui.cc chrome/browser/ui/webui/constrained_web_dialog_ui.cc
index 0e061e83bf94..687e822a2550 100644
--- chrome/browser/ui/webui/constrained_web_dialog_ui.cc
+++ chrome/browser/ui/webui/constrained_web_dialog_ui.cc
@@ -27,6 +27,8 @@
 #include "chrome/browser/extensions/tab_helper.h"
 #endif
 
+#include "cef/libcef/features/features.h"
+
 using content::RenderFrameHost;
 using content::RenderViewHost;
 using content::WebContents;
@@ -57,7 +59,9 @@ class ConstrainedWebDialogDelegateUserData
 ConstrainedWebDialogUI::ConstrainedWebDialogUI(content::WebUI* web_ui)
     : WebUIController(web_ui) {
 #if BUILDFLAG(ENABLE_EXTENSIONS)
+#if !BUILDFLAG(ENABLE_CEF)
   extensions::TabHelper::CreateForWebContents(web_ui->GetWebContents());
+#endif 
 #endif
 }
 
diff --git chrome/browser/ui/webui/print_preview/print_preview_handler.cc chrome/browser/ui/webui/print_preview/print_preview_handler.cc
index 2913dbfdc781..68d59e122a17 100644
--- chrome/browser/ui/webui/print_preview/print_preview_handler.cc
+++ chrome/browser/ui/webui/print_preview/print_preview_handler.cc
@@ -75,6 +75,8 @@
 #include "printing/print_settings.h"
 #include "third_party/icu/source/i18n/unicode/ulocdata.h"
 
+#include "cef/libcef/features/features.h"
+
 #if defined(OS_CHROMEOS)
 #include "chrome/browser/chromeos/settings/device_oauth2_token_service.h"
 #include "chrome/browser/chromeos/settings/device_oauth2_token_service_factory.h"
@@ -467,14 +469,18 @@ void PrintPreviewHandler::RegisterMessages() {
 void PrintPreviewHandler::OnJavascriptAllowed() {
   // Now that the UI is initialized, any future account changes will require
   // a printer list refresh.
+#if !BUILDFLAG(ENABLE_CEF)
   RegisterForGaiaCookieChanges();
+#endif
 }
 
 void PrintPreviewHandler::OnJavascriptDisallowed() {
   // Normally the handler and print preview will be destroyed together, but
   // this is necessary for refresh or navigation from the chrome://print page.
   weak_factory_.InvalidateWeakPtrs();
+#if !BUILDFLAG(ENABLE_CEF)
   UnregisterForGaiaCookieChanges();
+#endif
 }
 
 WebContents* PrintPreviewHandler::preview_web_contents() const {
@@ -1194,6 +1200,9 @@ PrinterHandler* PrintPreviewHandler::GetPrinterHandler(
     }
     return privet_printer_handler_.get();
   }
+#else // !BUILDFLAG(ENABLE_SERVICE_DISCOVERY)
+  if (printer_type == PrinterType::kPrivetPrinter)
+    return nullptr;
 #endif
   if (printer_type == PrinterType::kPdfPrinter) {
     if (!pdf_printer_handler_) {
diff --git content/browser/download/download_manager_impl.cc content/browser/download/download_manager_impl.cc
index 52962a868999..506983be25df 100644
--- content/browser/download/download_manager_impl.cc
+++ content/browser/download/download_manager_impl.cc
@@ -344,7 +344,7 @@ DownloadManagerImpl::DownloadManagerImpl(BrowserContext* browser_context)
 }
 
 DownloadManagerImpl::~DownloadManagerImpl() {
-  DCHECK(!shutdown_needed_);
+  //DCHECK(!shutdown_needed_);
 }
 
 DownloadItemImpl* DownloadManagerImpl::CreateActiveItem(
diff --git ui/shell_dialogs/base_shell_dialog_win.cc ui/shell_dialogs/base_shell_dialog_win.cc
index 9ccd1bbc4562..23d14323fcb7 100644
--- ui/shell_dialogs/base_shell_dialog_win.cc
+++ ui/shell_dialogs/base_shell_dialog_win.cc
@@ -30,7 +30,7 @@ BaseShellDialogImpl::RunState BaseShellDialogImpl::BeginRun(HWND owner) {
   DCHECK(!IsRunningDialogForOwner(owner));
   // The owner must be a top level window, otherwise we could end up with two
   // entries in our map for the same top level window.
-  DCHECK(!owner || owner == GetAncestor(owner, GA_ROOT));
+  // DCHECK(!owner || owner == GetAncestor(owner, GA_ROOT));
   RunState run_state;
   run_state.dialog_thread = CreateDialogThread();
   run_state.owner = owner;
diff --git chrome/browser/ui/webui/print_preview/pdf_printer_handler.cc chrome/browser/ui/webui/print_preview/pdf_printer_handler.cc
index 52fbb52e8957..28e5e74c0d41 100644
--- chrome/browser/ui/webui/print_preview/pdf_printer_handler.cc
+++ chrome/browser/ui/webui/print_preview/pdf_printer_handler.cc
@@ -151,6 +151,7 @@ PdfPrinterHandler::PdfPrinterHandler(Profile* profile,
     : preview_web_contents_(preview_web_contents),
       profile_(profile),
       sticky_settings_(sticky_settings),
+      download_prefs_(new DownloadPrefs(profile)),
       weak_ptr_factory_(this) {}
 
 PdfPrinterHandler::~PdfPrinterHandler() {
@@ -227,8 +228,7 @@ void PdfPrinterHandler::FileSelected(const base::FilePath& path,
                                      int /* index */,
                                      void* /* params */) {
   // Update downloads location and save sticky settings.
-  DownloadPrefs* download_prefs = DownloadPrefs::FromBrowserContext(profile_);
-  download_prefs->SetSaveFilePath(path.DirName());
+  download_prefs_->SetSaveFilePath(path.DirName());
   sticky_settings_->SaveInPrefs(profile_->GetPrefs());
   print_to_pdf_path_ = path;
   PostPrintToPdfTask();
@@ -319,8 +319,7 @@ void PdfPrinterHandler::SelectFile(const base::FilePath& default_filename,
   }
 
   // Get save location from Download Preferences.
-  DownloadPrefs* download_prefs = DownloadPrefs::FromBrowserContext(profile_);
-  base::FilePath path = download_prefs->SaveFilePath();
+  base::FilePath path = download_prefs_->SaveFilePath();
   sticky_settings_->SaveInPrefs(profile_->GetPrefs());
 
   // Handle the no prompting case. Like the dialog prompt, this function
@@ -343,7 +342,7 @@ void PdfPrinterHandler::SelectFile(const base::FilePath& default_filename,
 
   // Get default download directory. This will be used as a fallback if the
   // save directory does not exist.
-  base::FilePath default_path = download_prefs->DownloadPath();
+  base::FilePath default_path = download_prefs_->DownloadPath();
   base::PostTaskWithTraitsAndReplyWithResult(
       FROM_HERE, {base::MayBlock(), base::TaskPriority::BACKGROUND},
       base::BindOnce(&SelectSaveDirectory, path, default_path),
diff --git a/chrome/browser/ui/webui/print_preview/pdf_printer_handler.h b/chrome/browser/ui/webui/print_preview/pdf_printer_handler.h
index 641fb89cc832..6e0101a1ab74 100644
--- a/chrome/browser/ui/webui/print_preview/pdf_printer_handler.h
+++ b/chrome/browser/ui/webui/print_preview/pdf_printer_handler.h
@@ -32,6 +32,7 @@ namespace printing {
 class StickySettings;
 }
 
+class DownloadPrefs;
 class GURL;
 class Profile;
 
@@ -98,6 +99,10 @@ class PdfPrinterHandler : public PrinterHandler,
 
   Profile* const profile_;
   printing::StickySettings* const sticky_settings_;
+  // we create and store download_prefs_ per print preview.
+  // originally the download_prefs_ will be retrieved using ChromeDownloadManagerDelegate::download_prefs()
+  // We cannot do that in CefDownloadManagerDelegate because this method is not in the base class.
+  DownloadPrefs* const download_prefs_;
 
   // Holds the path to the print to pdf request. It is empty if no such request
   // exists.
